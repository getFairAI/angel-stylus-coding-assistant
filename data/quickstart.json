[
  {
    "text": "Prerequisites\n\nRust toolchain\nFollow the instructions on Rust Lang's installation page to install a complete Rust toolchain (v1.81 or newer) on your system. After installation, ensure you can access the programs rustup, rustc, and cargo from your preferred terminal application.\n\nVS Code\nWe recommend VSCode as the IDE of choice for its excellent Rust support, but feel free to use another text editor or IDE if you're comfortable with those.\n\nSome helpful VS Code extensions for Rust development:\n- rust-analyzer: Provides advanced features like smart code completion and on-the-fly error checks\n- Error Lens: Immediately highlights errors and warnings in your code\n- Even Better TOML: Improves syntax highlighting and other features for TOML files, often used in Rust projects\n- Dependi: Helps manage Rust crate versions directly from the editor\n\nDocker\nThe testnode we will use as well as some cargo stylus commands require Docker to operate.\n\nYou can download Docker from Docker's website.\n\nFoundry's Cast\nFoundry's Cast is a command-line tool that allows you to interact with your EVM contracts. You need to install the Foundry CLI to use Cast.\n\nNitro devnode\nStylus is available on Arbitrum Sepolia, but we'll use nitro devnode which has a pre-funded wallet saving us the effort of wallet provisioning or running out of tokens to send transactions.\n\nInstall your devnode:\ngit clone https://github.com/OffchainLabs/nitro-devnode.git\ncd nitro-devnode\n\nLaunch your devnode:\n./run-dev-node.sh",
    "metadata": {
      "category": "Quickstart",
      "subsection": "Setting up your development environment"
    }
  },
  {
    "text": "cargo stylus is a CLI toolkit built to facilitate the development of Stylus contracts.\n\nIt is available as a plugin to the standard cargo tool used for developing Rust programs.\n\nInstalling cargo stylus\nIn your terminal, run:\n\ncargo install --force cargo-stylus\n\nAdd WASM (WebAssembly) as a build target for the specific Rust toolchain you are using. The below example sets your default Rust toolchain to 1.80 as well as adding the WASM build target:\n\nrustup default 1.80\nrustup target add wasm32-unknown-unknown --toolchain 1.80\n\nYou can verify that cargo stylus is installed by running cargo stylus --help in your terminal, which will return a list of helpful commands, we will use some of them in this guide:\n\ncargo stylus --help returns:\nCargo command for developing Stylus projects\n\nUsage: cargo stylus <COMMAND>\n\nCommands:\n  new         Create a new Stylus project\n  init        Initializes a Stylus project in the current directory\n  export-abi  Export a Solidity ABI\n  activate    Activate an already deployed contract [aliases: a]\n  cache       Cache a contract using the Stylus CacheManager for Arbitrum chains\n  check       Check a contract [aliases: c]\n  deploy      Deploy a contract [aliases: d]\n  verify      Verify the deployment of a Stylus contract [aliases: v]\n  cgen        Generate c code bindings for a Stylus contract\n  replay      Replay a transaction in gdb [aliases: r]\n  trace       Trace a transaction [aliases: t]\n  help        Print this message or the help of the given command(s)\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\nCreating a project\nLet's create our first Stylus project by running:\n\ncargo stylus new <YOUR_PROJECT_NAME>\n\ncargo stylus new generates a starter template that implements a Rust version of the Solidity Counter smart contract example:\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\ncontract Coutner {\n\n   uint count;\n\n  function setCount() public {\n    count = count + 1;\n  }\n\n  function getCount() view public returns(uint) {\n      return count;\n  }\n}\n\nAt this point, you can move on to the next step of this guide or develop your first Rust smart contract. Feel free to use the Stylus Rust SDK reference section as a starting point; it offers many examples to help you quickly familiarize yourself with Stylus.",
    "metadata": {
      "category": "Quickstart",
      "subsection": "Creating a Stylus project with cargo stylus"
    }
  },
  {
  "text": "By running cargo stylus check against your first contract, you can check if your program can be successfully deployed and activated onchain.\n\nImportant\nEnsure your Docker service runs so this command works correctly.\n\ncargo stylus check\n\ncargo stylus check executes a dry run on your project by compiling your contract to WASM and verifying if it can be deployed and activated onchain.\n\nIf the command above fails, you'll see detailed information about why your contract would be rejected:\n\nReading WASM file at bad-export.wat\nCompressed WASM size: 55 B\nStylus checks failed: program pre-deployment check failed when checking against\nARB_WASM_ADDRESS 0x0000â€¦0071: (code: -32000, message: program activation failed: failed to parse program)\n\nCaused by:\n    binary exports reserved symbol stylus_ink_left\n\nLocation:\n    prover/src/binary.rs:493:9, data: None\n\nThe contract can fail the check for various reasons (on compile, deployment, etc...). Reading the Invalid Stylus WASM Contracts explainer can help you understand what makes a WASM contract valid or not.\n\nIf your contract succeeds, you'll see something like this:\n\nFinished release [optimized] target(s) in 1.88s\nReading WASM file at hello-stylus/target/wasm32-unknown-unknown/release/hello-stylus.wasm\nCompressed WASM size: 3 KB\nProgram succeeded Stylus onchain activation checks with Stylus version: 1\n\nNote that running cargo stylus check may take a few minutes, especially if you're verifying a contract for the first time.\n\nSee cargo stylus check --help for more options.",
  "metadata": {
    "category": "Quickstart",
    "subsection": "Checking the validity of your contract"
    }
  },
  {
  "text": "Once you're ready to deploy your contract onchain, cargo stylus deploy will help you with the deployment and its gas estimation.\n\nEstimating gas\nNote: For every transaction, we'll use the testnode pre-funded wallet, you can use 0xb6b15c8cb491557369f3c7d2c287b053eb229daa9c22138887752191c9520659 as your private key.\n\nYou can estimate the gas required to deploy your contract by running:\n\ncargo stylus deploy \\\n  --endpoint='http://localhost:8547' \\\n  --private-key=\"0xb6b15c8cb491557369f3c7d2c287b053eb229daa9c22138887752191c9520659\" \\\n  --estimate-gas\n\nThe command should return something like this:\n\ndeployment tx gas: 7123737\ngas price: \"0.100000000\" gwei\ndeployment tx total cost: \"0.000712373700000000\" ETH\n\nDeployment\nLet's move on to the contract's actual deployment. Two transactions will be sent onchain: the contract deployment and its activation.\n\ncargo stylus deploy \\\n  --endpoint='http://localhost:8547' \\\n  --private-key=\"0xb6b15c8cb491557369f3c7d2c287b053eb229daa9c22138887752191c9520659\"\n\nOnce the deployment and activations are successful, you'll see an output similar to this:\n\ndeployed code at address: 0x33f54de59419570a9442e788f5dd5cf635b3c7ac\ndeployment tx hash: 0xa55efc05c45efc63647dff5cc37ad328a47ba5555009d92ad4e297bf4864de36\nwasm already activated!\n\nMake sure to save the contract's deployment address for future interactions!\n\nMore options are available for sending and outputting your transaction data. See cargo stylus deploy --help for more details.",
  "metadata": {
    "category": "Quickstart",
    "subsection": "Deploying your contract"
   }
  },
  {
  "text": "The cargo stylus tool makes it easy to export your contract's ABI using cargo stylus export-abi.\n\nThis command returns the Solidity ABI interface of your smart contract. If you have been running cargo stylus new without modifying the output, cargo stylus export-abi will return:\n\n/**\n * This file was automatically generated by Stylus and represents a Rust program.\n * For more information, please see [The Stylus SDK](https://github.com/OffchainLabs/stylus-sdk-rs).\n */\n\n// SPDX-License-Identifier: MIT-OR-APACHE-2.0\npragma solidity ^0.8.23;\n\ninterface ICounter {\n    function number() external view returns (uint256);\n\n    function setNumber(uint256 new_number) external;\n\n    function mulNumber(uint256 new_number) external;\n\n    function addNumber(uint256 new_number) external;\n\n    function increment() external;\n}\n\nEnsure you save the console output to a file that you'll be able to use with your dApp.\n\nInteracting with your Stylus contract\nStylus contracts are EVM-compatible, you can interact with them with your tool of choice, such as Hardhat, Foundry's Cast, or any other Ethereum-compatible tool. In this example, we'll use Foundry's Cast to send a call and then a transaction to our contract.",
  "metadata": {
    "category": "Quickstart",
    "subsection": "Exporting your contract's ABIs"
   }
  },
  {
  "text": "Our contract is a counter; in its initial state, it should store a counter value of 0. You can call your contract so it returns its current counter value by sending it the following command:\n\nCall to the function: number()(uint256)\ncast call --rpc-url 'http://localhost:8547' --private-key 0xb6b15c8cb491557369f3c7d2c287b053eb229daa9c22138887752191c9520659 \\\n[deployed-contract-address] \"number()(uint256)\"\n\nLet's break down the command:\n\n- cast call command sends a call to your contract\n- The --rpc-url option is the RPC URL endpoint of our testnode: http://localhost:8547\n- The --private-key option is the private key of our pre-funded development account. It corresponds to the address 0x3f1eae7d46d88f08fc2f8ed27fcb2ab183eb2d0e\n- The [deployed-contract-address] is the address we want to interact with, it's the address that was returned by cargo stylus deploy\n- number()(uint256) is the function we want to call in Solidity-style signature. The function returns the counter's current value\n\nCalling 'number()(uint256)' returns:\n0\n\nThe number()(uint256) function returns a value of 0, the contract's initial state.",
  "metadata": {
    "category": "Quickstart",
    "subsection": "Calling your contract"
   }
  },
  {
  "text": "Let's increment the counter by sending a transaction to your contract's increment() function. We'll use Cast's send command to send our transaction.\n\nSending a transaction to the function: increment()\ncast send --rpc-url 'http://localhost:8547' --private-key 0xb6b15c8cb491557369f3c7d2c287b053eb229daa9c22138887752191c9520659 \\\n[deployed-contract-address] \"increment()\"\n\nTransaction returns:\nblockHash               0xfaa2cce3b9995f3f2e2a2f192dc50829784da9ca4b7a1ad21665a25b3b161f7c\nblockNumber             20\ncontractAddress\ncumulativeGasUsed       97334\neffectiveGasPrice       100000000\nfrom                    0x3f1Eae7D46d88F08fc2F8ed27FCb2AB183EB2d0E\ngasUsed                 97334\nlogs                    []\nlogsBloom               0xnroot\nstatus                  1 (success)\ntransactionHash         0x28c6ba8a0b9915ed3acc449cf6c645ecc406a4b19278ec1eb67f5a7091d18f6b\ntransactionIndex        1\ntype                    2\nblobGasPrice\nblobGasUsed\nauthorizationList\nto                      0x11B57FE348584f042E436c6Bf7c3c3deF171de49\ngasUsedForL1             \"0x0\"\nl1BlockNumber             \"0x1223\"\n\nOur transactions returned a status of 1, indicating success, and the counter has been incremented (you can verify this by calling your contract's number()(uint256) function again).\n\nConclusion\nCongratulations! You've successfully initialized, deployed, and interacted with your first contract using Stylus and Rust.\n\nFeel free to explore the Stylus Rust SDK reference for more information on using Stylus in your Arbitrum projects.",
  "metadata": {
    "category": "Quickstart",
    "subsection": "Sending a transaction to your contract"
   }
  }
]
